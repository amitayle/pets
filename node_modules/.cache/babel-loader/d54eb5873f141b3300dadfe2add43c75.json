{"ast":null,"code":"export const checkValidity = (value, rules) => {\n  let isValid = true;\n\n  if (!rules) {\n    return true;\n  }\n\n  if (rules.requird) {\n    isValid = value.trim() !== '' && isValid;\n    isValid = !value.includes(';');\n  }\n\n  if (rules.isName) {\n    // Allow A-Z, a-z, 0-9 and underscore. Min 1 char.\n    const pattern = /^[a-zA-Zא_]+$/;\n    isValid = pattern.test(value) && isValid;\n  }\n\n  if (rules.minLength) {\n    isValid = value.length >= rules.minLength && isValid;\n  }\n\n  if (rules.maxLength) {\n    isValid = value.length <= rules.maxLength && isValid;\n  }\n\n  if (rules.isEmail) {\n    const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n    isValid = pattern.test(value) && isValid;\n  }\n\n  if (rules.isNumeric) {\n    const pattern = /^\\d+$/;\n    isValid = pattern.test(value) && isValid;\n  } // if (rules.isSelect){\n  //     // is\n  // }\n\n\n  return isValid;\n};","map":{"version":3,"sources":["/Users/amitaylevi/Documents/react/pets/src/Utilities/CheckValidity.js"],"names":["checkValidity","value","rules","isValid","requird","trim","includes","isName","pattern","test","minLength","length","maxLength","isEmail","isNumeric"],"mappings":"AAEA,OAAO,MAAMA,aAAa,GAAG,CAACC,KAAD,EAAQC,KAAR,KAAkB;AAC3C,MAAIC,OAAO,GAAG,IAAd;;AACA,MAAI,CAACD,KAAL,EAAY;AACR,WAAO,IAAP;AACH;;AACD,MAAIA,KAAK,CAACE,OAAV,EAAmB;AACfD,IAAAA,OAAO,GAAGF,KAAK,CAACI,IAAN,OAAiB,EAAjB,IAAuBF,OAAjC;AACAA,IAAAA,OAAO,GAAG,CAACF,KAAK,CAACK,QAAN,CAAe,GAAf,CAAX;AACH;;AACD,MAAGJ,KAAK,CAACK,MAAT,EAAgB;AACX;AACD,UAAMC,OAAO,GAAG,eAAhB;AACAL,IAAAA,OAAO,GAAGK,OAAO,CAACC,IAAR,CAAaR,KAAb,KAAuBE,OAAjC;AACH;;AACD,MAAID,KAAK,CAACQ,SAAV,EAAqB;AACjBP,IAAAA,OAAO,GAAGF,KAAK,CAACU,MAAN,IAAgBT,KAAK,CAACQ,SAAtB,IAAmCP,OAA7C;AACH;;AACD,MAAID,KAAK,CAACU,SAAV,EAAqB;AACjBT,IAAAA,OAAO,GAAGF,KAAK,CAACU,MAAN,IAAgBT,KAAK,CAACU,SAAtB,IAAmCT,OAA7C;AACH;;AACD,MAAID,KAAK,CAACW,OAAV,EAAmB;AACf,UAAML,OAAO,GAAG,uIAAhB;AACAL,IAAAA,OAAO,GAAGK,OAAO,CAACC,IAAR,CAAaR,KAAb,KAAuBE,OAAjC;AACH;;AACD,MAAID,KAAK,CAACY,SAAV,EAAqB;AACjB,UAAMN,OAAO,GAAG,OAAhB;AACAL,IAAAA,OAAO,GAAGK,OAAO,CAACC,IAAR,CAAaR,KAAb,KAAuBE,OAAjC;AACH,GA3B0C,CA4B3C;AACA;AACA;;;AACA,SAAOA,OAAP;AACH,CAhCM","sourcesContent":["\n\nexport const checkValidity = (value, rules) => {\n    let isValid = true\n    if (!rules) {\n        return true;\n    }\n    if (rules.requird) {\n        isValid = value.trim() !== '' && isValid;\n        isValid = !value.includes(';');\n    }\n    if(rules.isName){\n         // Allow A-Z, a-z, 0-9 and underscore. Min 1 char.\n        const pattern = /^[a-zA-Zא_]+$/;\n        isValid = pattern.test(value) && isValid\n    }\n    if (rules.minLength) {\n        isValid = value.length >= rules.minLength && isValid\n    }\n    if (rules.maxLength) {\n        isValid = value.length <= rules.maxLength && isValid\n    }\n    if (rules.isEmail) {\n        const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n        isValid = pattern.test(value) && isValid\n    }\n    if (rules.isNumeric) {\n        const pattern = /^\\d+$/;\n        isValid = pattern.test(value) && isValid\n    }\n    // if (rules.isSelect){\n    //     // is\n    // }\n    return isValid;\n}"]},"metadata":{},"sourceType":"module"}