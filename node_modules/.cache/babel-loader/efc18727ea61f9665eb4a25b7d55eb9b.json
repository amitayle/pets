{"ast":null,"code":"var _jsxFileName = \"/Users/amitaylevi/Documents/react/pets/src/containers/formPAge/UserDetailsForm/UserDetailsForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport * as texts from \"../../../Utilities/textForApp\";\nimport Input from \"../../../components/UI/Input/Input\";\nimport { checkValidity } from \"../../../Utilities/CheckValidity\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst UserDetailsForm = ({\n  userDetails\n}) => {\n  _s();\n\n  const [userFormElements, setUserFormElements] = useState({\n    firstName: {\n      type: \"text\",\n      placeholder: texts.FORM_FIRST_NAME,\n      value: \"\",\n      validation: {\n        requird: true\n      },\n      valid: false,\n      touched: false\n    },\n    lastName: {\n      type: \"text\",\n      placeholder: texts.FORM_LAST_NAME,\n      value: \"\",\n      validation: {\n        requird: true\n      },\n      valid: false,\n      touched: false\n    },\n    phone: {\n      type: \"number\",\n      placeholder: texts.FORM_PHONE,\n      value: \"\",\n      validation: {\n        requird: true,\n        isNumeric: true,\n        minLength: 7,\n        maxLength: 7\n      },\n      valid: false,\n      touched: false\n    },\n    areaCode: {\n      type: \"select\",\n      placeholder: texts.FORM_AREA_CODE,\n      value: \"\",\n      validation: {\n        requird: true\n      },\n      valid: false,\n      touched: false\n    },\n    email: {\n      type: \"email\",\n      placeholder: texts.FORM_EMAIL,\n      value: \"\",\n      validation: {\n        requird: true,\n        isEmail: true\n      },\n      valid: false,\n      touched: false\n    },\n    address: {\n      type: \"text\",\n      placeholder: texts.FORM_ADDRESS,\n      value: \"\",\n      validation: {\n        requird: true\n      },\n      valid: false,\n      touched: false\n    },\n    city: {\n      type: \"text\",\n      placeholder: texts.FORM_CITY,\n      value: \"\",\n      validation: {\n        requird: true\n      },\n      valid: false,\n      touched: false\n    }\n  });\n\n  const inputChangeHandler = (event, inputKey) => {\n    const updateUserFormElemelts = { ...userFormElements\n    };\n    const updateElement = { ...updateUserFormElemelts[inputKey]\n    };\n    updateElement.value = event.target.value;\n    updateElement.touched = true;\n    updateElement.valid = checkValidity(updateElement.value, updateElement.validation);\n    updateUserFormElemelts[inputKey] = updateElement;\n    setUserFormElements(updateUserFormElemelts);\n    userDetails(userFormElements);\n    checkFormValidity();\n  };\n\n  const checkFormValidity = () => {\n    let validationOfForm = true;\n\n    for (let inputKey in userFormElements) {\n      validationOfForm = formUserDetails[inputKey].valid && validationOfForm && agreeIsChecked;\n      console.log(validationOfForm);\n    }\n\n    setFormIsValid(validationOfForm);\n  };\n\n  const formElementArrey = [];\n\n  for (let key in userFormElements) {\n    formElementArrey.push({\n      key: key,\n      element: userFormElements[key]\n    });\n  }\n\n  const allInputs = formElementArrey.map(item => {\n    return (\n      /*#__PURE__*/\n      // <div>\n      _jsxDEV(Input, {\n        type: item.element.type,\n        value: item.element.value,\n        placeholder: item.element.placeholder,\n        changed: event => inputChangeHandler(event, item.key),\n        touched: item.element.touched,\n        invalid: !item.element.valid\n      }, item.key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this) // </div>\n\n    );\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: allInputs\n  }, void 0, false);\n};\n\n_s(UserDetailsForm, \"qmhDWlqds6zevOHDPElie3EZwjg=\");\n\n_c = UserDetailsForm;\nexport default UserDetailsForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserDetailsForm\");","map":{"version":3,"sources":["/Users/amitaylevi/Documents/react/pets/src/containers/formPAge/UserDetailsForm/UserDetailsForm.js"],"names":["React","useState","texts","Input","checkValidity","UserDetailsForm","userDetails","userFormElements","setUserFormElements","firstName","type","placeholder","FORM_FIRST_NAME","value","validation","requird","valid","touched","lastName","FORM_LAST_NAME","phone","FORM_PHONE","isNumeric","minLength","maxLength","areaCode","FORM_AREA_CODE","email","FORM_EMAIL","isEmail","address","FORM_ADDRESS","city","FORM_CITY","inputChangeHandler","event","inputKey","updateUserFormElemelts","updateElement","target","checkFormValidity","validationOfForm","formUserDetails","agreeIsChecked","console","log","setFormIsValid","formElementArrey","key","push","element","allInputs","map","item"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport * as texts from \"../../../Utilities/textForApp\";\nimport Input from \"../../../components/UI/Input/Input\";\nimport { checkValidity } from \"../../../Utilities/CheckValidity\";\n\nconst UserDetailsForm = ({ userDetails }) => {\n  const [userFormElements, setUserFormElements] = useState({\n    firstName: {\n      type: \"text\",\n      placeholder: texts.FORM_FIRST_NAME,\n      value: \"\",\n      validation: {\n        requird: true,\n      },\n      valid: false,\n      touched: false,\n    },\n    lastName: {\n      type: \"text\",\n      placeholder: texts.FORM_LAST_NAME,\n      value: \"\",\n      validation: {\n        requird: true,\n      },\n      valid: false,\n      touched: false,\n    },\n    phone: {\n      type: \"number\",\n      placeholder: texts.FORM_PHONE,\n      value: \"\",\n      validation: {\n        requird: true,\n        isNumeric: true,\n        minLength: 7,\n        maxLength: 7,\n      },\n      valid: false,\n      touched: false,\n    },\n    areaCode: {\n      type: \"select\",\n      placeholder: texts.FORM_AREA_CODE,\n      value: \"\",\n      validation: {\n        requird: true,\n      },\n      valid: false,\n      touched: false,\n    },\n    email: {\n      type: \"email\",\n      placeholder: texts.FORM_EMAIL,\n      value: \"\",\n      validation: {\n        requird: true,\n        isEmail: true,\n      },\n      valid: false,\n      touched: false,\n    },\n    address: {\n      type: \"text\",\n      placeholder: texts.FORM_ADDRESS,\n      value: \"\",\n      validation: {\n        requird: true,\n      },\n      valid: false,\n      touched: false,\n    },\n    city: {\n      type: \"text\",\n      placeholder: texts.FORM_CITY,\n      value: \"\",\n      validation: {\n        requird: true,\n      },\n      valid: false,\n      touched: false,\n    },\n  });\n\n  const inputChangeHandler = (event, inputKey) => {\n    const updateUserFormElemelts = { ...userFormElements };\n    const updateElement = { ...updateUserFormElemelts[inputKey] };\n    updateElement.value = event.target.value;\n    updateElement.touched = true;\n    updateElement.valid = checkValidity(\n      updateElement.value,\n      updateElement.validation\n    );\n\n    updateUserFormElemelts[inputKey] = updateElement;\n    setUserFormElements(updateUserFormElemelts);\n    userDetails(userFormElements);\n\n    checkFormValidity();\n  };\n  const checkFormValidity = () => {\n    let validationOfForm = true;\n    for (let inputKey in userFormElements) {\n      validationOfForm =\n        formUserDetails[inputKey].valid && validationOfForm && agreeIsChecked;\n      console.log(validationOfForm);\n    }\n    setFormIsValid(validationOfForm);\n  };\n\n  const formElementArrey = [];\n  for (let key in userFormElements) {\n    formElementArrey.push({ key: key, element: userFormElements[key] });\n  }\n\n  const allInputs = formElementArrey.map((item) => {\n    return (\n      // <div>\n        <Input\n          key={item.key}\n          type={item.element.type}\n          value={item.element.value}\n          placeholder={item.element.placeholder}\n          changed={(event) => inputChangeHandler(event, item.key)}\n          touched={item.element.touched}\n          invalid={!item.element.valid}\n        />\n      // </div>\n    );\n  });\n\n  return <>{allInputs}</>;\n};\n\nexport default UserDetailsForm;\n"]},"metadata":{},"sourceType":"module"}